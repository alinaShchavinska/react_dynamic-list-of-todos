{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","sortBy","query","handleChange","event","target","name","value","setState","this","props","todos","selectedUserId","onSelect","todosFiltered","filter","todo","title","toLowerCase","includes","completed","className","type","onChange","placeholder","map","classNames","htmlFor","checked","userId","onClick","id","React","Component","API_URL","CurrentUser","user","loadData","prevProps","a","fetch","then","response","json","onClearUserInfo","email","phone","App","onClear","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c3656b9c.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { Todo } from '../../react-app-env';\n\ntype Props = {\n  todos: Todo[];\n  selectedUserId: number;\n  onSelect: (userId: number) => void;\n};\n\ntype State = {\n  sortBy: string,\n  query: string,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state = {\n    sortBy: '',\n    query: '',\n  };\n\n  handleChange = (\n    event: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    } as Pick<State, 'query' | 'sortBy'>);\n  };\n\n  render() {\n    const { todos, selectedUserId, onSelect } = this.props;\n    const { query, sortBy } = this.state;\n\n    const todosFiltered = todos\n      .filter((todo) => {\n        if (query) {\n          return (\n            todo.title !== null\n            && todo.title.toLowerCase().includes(query.toLowerCase())\n          );\n        }\n\n        return todo;\n      })\n      .filter((todo) => {\n        switch (sortBy) {\n          case 'active':\n            return !todo.completed;\n          case 'completed':\n            return todo.completed;\n          default:\n            return todo;\n        }\n      });\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <input\n            type=\"text\"\n            name=\"query\"\n            value={query}\n            onChange={this.handleChange}\n            placeholder=\"Search by title\"\n          />\n          <select\n            name=\"sortBy\"\n            value={sortBy}\n            onChange={this.handleChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n\n          <ul className=\"TodoList__list\">\n            {todosFiltered.map((todo) => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--checked': todo.completed,\n                  },\n                  { 'TodoList__item--unchecked': !todo.completed },\n                )}\n              >\n                <label htmlFor=\"todoStatus\">\n                  <input type=\"checkbox\" checked={todo.completed} />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames('TodoList__user-button button', {\n                    'TodoList__user-button--selected':\n                      todo.userId === selectedUserId,\n                  })}\n                  type=\"button\"\n                  onClick={() => onSelect(todo.userId)}\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const API_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = () => {\n  return fetch(`${API_URL}/todos`)\n    .then(response => response.json());\n};\n\nexport const getUsersById = (userId:number) => {\n  return fetch(`${API_URL}/users/${userId}`)\n    .then(response => response.json());\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUsersById } from '../../api';\nimport { User } from '../../react-app-env';\n\ntype Props = {\n  userId: number;\n  onClearUserInfo: () => void;\n};\n\ntype State = {\n  user: User | null;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps: { userId: number; }) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    const user = await getUsersById(this.props.userId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { onClearUserInfo } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${user?.id}`}</span>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n        <p className=\"CurrentUser__email\">{user?.email}</p>\n        <p className=\"CurrentUser__phone\">{user?.phone}</p>\n        <button\n          type=\"button\"\n          className=\"CurrentUser__clear button\"\n          onClick={onClearUserInfo}\n        >\n          Clear User Info\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\nimport { Todo } from './react-app-env';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  onSelect = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  onClear = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  async loadData() {\n    this.setState({ todos: await getTodos() });\n  }\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={this.state.todos}\n            selectedUserId={this.state.selectedUserId}\n            onSelect={this.onSelect}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} onClearUserInfo={this.onClear} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}